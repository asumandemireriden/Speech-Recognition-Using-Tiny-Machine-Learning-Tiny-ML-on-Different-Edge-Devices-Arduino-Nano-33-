/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 27.12.2022 21:48:57

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 7456;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[17];
TfLiteEvalTensor tflEvalTensors[17];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[8];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const TfArray<1, float> quant0_scale = { 1, { 0.049623288214206696, } };
const TfArray<1, int> quant0_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 50, 13, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data2[2] = { -1, 832, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data3[8*3*3*1] = { 
  /* [0][0][][] */ 127, 47, 81, 
  /* [0][1][][] */ 94, 59, 34, 
  /* [0][2][][] */ 53, 52, 35, 
  /* [1][0][][] */ -55, -22, 86, 
  /* [1][1][][] */ -14, 44, 14, 
  /* [1][2][][] */ 64, -127, 52, 
  /* [2][0][][] */ 82, -42, -38, 
  /* [2][1][][] */ 30, -18, -24, 
  /* [2][2][][] */ -26, 127, -49, 
  /* [3][0][][] */ -122, 85, -6, 
  /* [3][1][][] */ -127, 99, -42, 
  /* [3][2][][] */ 38, 40, -36, 
  /* [4][0][][] */ 44, 15, -70, 
  /* [4][1][][] */ 71, 45, -55, 
  /* [4][2][][] */ 127, -105, -12, 
  /* [5][0][][] */ 88, 29, -8, 
  /* [5][1][][] */ -55, 127, -6, 
  /* [5][2][][] */ -81, -115, 16, 
  /* [6][0][][] */ 63, -102, -7, 
  /* [6][1][][] */ -85, -127, 27, 
  /* [6][2][][] */ 6, -112, -96, 
  /* [7][0][][] */ -39, -88, -2, 
  /* [7][1][][] */ 21, 127, 2, 
  /* [7][2][][] */ 12, -43, 0, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant3_scale = { 8, { 0.0034449796658009291, 0.003544266102835536, 0.0041855070739984512, 0.0033079213462769985, 0.0032192426733672619, 0.0042637265287339687, 0.0019581494852900505, 0.0041671288199722767, } };
const TfArray<8, int> quant3_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[8] = { -1775, -2476, -2209, -3653, -2992, -1192, 1726, -1251, };
const TfArray<1, int> tensor_dimension4 = { 1, { 8 } };
const TfArray<8, float> quant4_scale = { 8, { 0.00017095121438615024, 0.00017587814363650978, 0.0002076986274914816, 0.00016414994024671614, 0.00015974941197782755, 0.00021158013259992003, 9.716981730889529e-05, 0.00020678662986028939, } };
const TfArray<8, int> quant4_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[16*3*3*8] = { 
  /* [0][0][][] */ 94,30,67,67,-106,-75,65,-93, -46,-54,22,46,14,-6,-31,-42, -2,-12,32,4,15,-5,22,-22, 
  /* [0][1][][] */ 68,-25,42,-31,-91,-83,-12,11, -48,28,-26,27,-10,-15,-47,27, -35,25,23,-6,17,13,41,-52, 
  /* [0][2][][] */ 81,-10,29,-44,-1,-71,-127,-69, -37,62,-23,52,34,-32,-19,4, -47,-10,7,-38,13,-11,25,-65, 
  /* [1][0][][] */ -38,-45,67,5,71,-63,-36,-48, 40,-65,44,64,-39,-64,-63,-57, -26,-27,32,65,-17,-19,-108,6, 
  /* [1][1][][] */ 11,-116,-4,-10,1,-21,-74,26, 8,-12,-14,37,-22,30,-88,-37, 14,-9,22,28,7,16,-80,-11, 
  /* [1][2][][] */ 88,-42,-53,-44,-60,-127,-118,-13, -13,16,30,53,5,-35,-94,-59, 54,34,7,-40,70,-6,-22,-88, 
  /* [2][0][][] */ -94,64,22,-33,42,-93,62,-118, 13,-58,26,8,-10,-11,-127,-97, -15,47,37,-24,13,-63,43,29, 
  /* [2][1][][] */ -32,-21,70,-30,-4,-92,58,-56, 40,-32,27,-20,-68,-14,-48,-60, -30,19,30,-26,-12,-20,14,32, 
  /* [2][2][][] */ -56,-116,64,-105,74,-58,80,-57, 21,26,1,-21,43,12,-25,-17, -76,-7,0,-56,3,-3,-32,14, 
  /* [3][0][][] */ -86,-6,-108,53,45,-44,36,31, -10,-49,55,70,39,-16,42,-17, 8,14,21,13,37,-20,-24,21, 
  /* [3][1][][] */ 42,5,-52,40,-127,-64,-52,54, -66,-77,-96,-46,42,28,-6,6, 9,12,30,3,9,-2,-34,7, 
  /* [3][2][][] */ -46,17,-72,111,-46,-102,-109,-97, -115,-8,-92,101,8,-9,-35,76, 2,1,17,-28,44,17,21,23, 
  /* [4][0][][] */ -82,-105,-9,39,-127,5,-93,-66, -18,72,35,-62,-103,-83,41,50, 0,-55,65,40,-65,-41,-1,9, 
  /* [4][1][][] */ -60,-17,-90,-10,-52,126,-48,38, 58,11,88,51,-25,-49,-13,-32, -39,-15,51,55,-104,-1,-40,54, 
  /* [4][2][][] */ -116,15,-20,-105,-34,-90,9,62, 75,12,80,28,23,-31,8,6, -81,-25,51,52,-44,-1,-95,-3, 
  /* [5][0][][] */ -105,-102,-25,40,-85,54,-41,11, 26,-89,41,31,50,78,-63,-68, -44,-15,-2,71,-39,-57,-4,5, 
  /* [5][1][][] */ -62,-18,22,74,-4,-115,-9,58, -18,38,46,-27,-63,-9,-42,22, -11,9,1,1,-6,-8,44,49, 
  /* [5][2][][] */ -65,-91,-117,-87,-97,4,-127,4, -122,25,-11,-86,-67,50,-7,-3, -21,17,-22,-4,2,-8,45,27, 
  /* [6][0][][] */ 47,13,-9,-27,-31,-72,-57,84, -122,-20,-87,-72,-117,27,19,5, 18,21,-17,-10,10,-57,3,5, 
  /* [6][1][][] */ -21,-39,-15,-105,-111,26,-53,-95, 1,-61,-39,71,-31,5,12,32, 26,16,-3,-46,32,-12,-42,-29, 
  /* [6][2][][] */ 12,1,-18,9,-6,42,-92,16, 7,-78,-76,84,-17,-43,-127,7, -2,-38,-11,-116,48,40,23,62, 
  /* [7][0][][] */ 42,-80,12,45,46,-72,-5,-63, -4,-24,-56,-37,86,-41,23,-127, -1,-6,-100,29,41,-40,-52,-23, 
  /* [7][1][][] */ -29,-34,-25,69,49,-75,46,-10, -29,-51,-39,45,22,-86,-13,1, -9,-30,-75,21,36,-46,5,-23, 
  /* [7][2][][] */ 4,-84,14,-4,80,-84,-80,-36, 35,-56,-37,66,-93,-87,-64,-40, 4,-10,-20,69,37,-25,39,-13, 
  /* [8][0][][] */ -35,-78,7,-93,91,0,82,-68, 82,-39,-42,56,-37,-71,-63,-16, -49,-26,-39,36,109,-74,-6,-17, 
  /* [8][1][][] */ -31,-35,-127,-4,22,-61,74,-114, -1,-78,20,19,4,0,-97,28, 19,0,-74,98,37,-37,-39,-20, 
  /* [8][2][][] */ 109,-58,-38,77,-118,-125,-95,-15, -72,-14,-32,-37,-24,-33,74,-47, -41,-10,-76,90,60,-14,-13,-50, 
  /* [9][0][][] */ 83,-71,-119,-4,-66,-75,-127,9, 53,-93,44,-84,20,-31,-25,-89, -68,-44,-74,6,26,-38,36,11, 
  /* [9][1][][] */ -24,29,-40,56,-11,-67,-22,-72, -46,-76,76,-91,28,-73,31,-64, 16,-38,-63,53,12,9,-30,-39, 
  /* [9][2][][] */ -11,-60,47,9,106,-86,-31,-84, -111,45,-59,-43,-25,-71,52,-52, -12,-16,-19,18,23,3,-59,-11, 
  /* [10][0][][] */ -69,27,15,-28,-56,-28,4,65, -89,-118,-57,25,66,-8,-37,-25, -34,100,-8,-61,34,-29,-6,-82, 
  /* [10][1][][] */ -74,20,-21,-101,-54,44,17,28, 11,-45,-20,63,40,-15,-45,73, -127,55,-5,-103,33,-14,18,-47, 
  /* [10][2][][] */ -72,-20,-120,-20,-103,43,15,-13, 18,-21,-10,-40,76,-36,0,-47, 12,27,21,-55,4,-18,-9,-46, 
  /* [11][0][][] */ -54,-5,39,5,23,14,27,26, -52,-9,-38,-12,-29,-49,41,20, 32,-48,66,28,-93,-27,-46,-60, 
  /* [11][1][][] */ -68,-6,-102,48,-117,-35,47,-95, -7,-69,28,-48,47,-66,-37,-127, -75,-87,-64,-115,-18,-105,57,-82, 
  /* [11][2][][] */ -71,-86,20,-117,43,-44,3,-29, -51,-29,-88,-114,-50,-100,4,-25, -69,55,-94,39,-5,-66,49,-76, 
  /* [12][0][][] */ -17,-35,-117,-66,-44,1,-70,-121, -45,-46,8,-59,-30,-105,-66,-34, -3,8,-88,-69,-58,3,-100,4, 
  /* [12][1][][] */ -115,-21,-63,-49,-16,-23,-51,-59, 13,-83,-26,-64,-36,-50,-126,-15, 18,-18,-118,-48,-69,-66,-89,-62, 
  /* [12][2][][] */ -89,-127,11,-53,-79,-82,-79,-26, -54,-67,-99,-55,-72,-78,-113,-124, -66,-65,-54,-46,-55,-99,-85,-48, 
  /* [13][0][][] */ -42,-38,-96,-9,-77,-124,-64,-84, -73,-54,-56,-79,-21,-36,-122,-67, -62,-100,-56,-28,-46,-46,-5,-50, 
  /* [13][1][][] */ 35,-64,6,-73,0,-53,-30,-8, -24,8,-15,-47,-41,-32,-65,18, -22,-68,17,-94,-36,-4,30,8, 
  /* [13][2][][] */ 9,-34,-69,-96,-32,14,-30,-94, 5,-62,-64,-48,3,-27,4,-87, -127,-19,9,-70,-25,-3,-16,19, 
  /* [14][0][][] */ -45,-67,6,-44,-111,22,-5,-45, -121,-58,-94,2,-79,-51,54,-38, 14,-33,39,-43,23,-33,-9,-14, 
  /* [14][1][][] */ -116,33,21,-116,-45,23,-51,3, -31,13,-84,15,-79,-67,40,20, -17,11,-93,22,40,-44,7,3, 
  /* [14][2][][] */ 35,-16,-127,13,-40,14,-11,14, 32,-72,-26,35,-59,-98,-84,4, 57,-89,-12,-53,72,-22,-24,19, 
  /* [15][0][][] */ -59,92,-17,28,-127,21,-97,-32, 0,38,-42,20,33,-19,10,56, -2,-8,-100,4,-14,-19,3,32, 
  /* [15][1][][] */ -86,4,-77,51,-11,-70,-94,-116, 43,-22,-6,-12,15,39,1,77, -1,-87,26,-1,-49,1,35,53, 
  /* [15][2][][] */ -106,68,53,47,-88,16,-75,14, 5,-56,68,-74,3,38,-25,38, -11,-49,-79,34,-95,6,0,30, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant5_scale = { 16, { 0.0069851498119533062, 0.0069754044525325298, 0.0069863814860582352, 0.0068806246854364872, 0.0064063076861202717, 0.0072411764413118362, 0.0076006799936294556, 0.0074697546660900116, 0.0066441386006772518, 0.007365355733782053, 0.0075766430236399174, 0.0075584342703223228, 0.0028761213179677725, 0.0032249297946691513, 0.0077351657673716545, 0.0064464118331670761, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[16] = { -8632, 585, -2184, -894, -4623, -408, -782, -940, -2959, 1579, -1957, 1682, -3793, -4278, -946, -1891, };
const TfArray<1, int> tensor_dimension6 = { 1, { 16 } };
const TfArray<16, float> quant6_scale = { 16, { 0.00013237589155323803, 0.00013219121319707483, 0.00013239923282526433, 0.00013039502664469182, 0.00012140622857259586, 0.00013722786388825625, 0.00014404083776753396, 0.00014155966346152127, 0.00012591337144840509, 0.00013958118506707251, 0.00014358530461322516, 0.0001432402350474149, 5.4505504522239789e-05, 6.1115788412280381e-05, 0.00014658947475254536, 0.00012216623872518539, } };
const TfArray<16, int> quant6_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[7*832] = { 
  -29, -24, 4, -4, 2, -3, -28, 8, 8, 19, 0, -45, -10, -4, 7, -5, -15, 8, -39, 7, -28, -49, 12, 1, -11, -11, -29, -27, -2, 10, -1, -2, -73, -16, -34, -3, 11, 31, -25, -35, -17, 9, -6, -55, 3, -4, -9, -18, -1, -11, -6, 8, -15, -13, -15, 10, -20, -22, 4, -82, 9, -10, 18, 9, 15, -11, 14, -22, 3, 0, -46, -30, -5, 11, -10, -75, 1, -3, -7, -3, 14, 11, 0, 0, -23, -28, -16, -4, 6, 21, -1, -77, 10, 7, 22, -36, -37, -12, -3, 2, 2, -37, -25, -44, 7, 45, 16, -52, 2, -9, -56, -12, 16, -6, -36, -1, 19, -70, -37, -49, -15, -13, 23, -34, -4, -4, -3, 12, 19, -21, 8, -28, 8, -3, -51, -9, -14, 9, -11, -9, 7, -8, -22, -15, -28, -10, 1, -3, -29, -29, -16, -19, -24, 18, -6, -36, 2, 6, -49, -4, 1, -4, -6, -17, 13, -7, -11, 15, 34, -44, -8, -17, 2, 5, 22, 12, -29, -7, -28, -5, 11, 14, 16, -6, 28, -10, 9, 6, 8, 0, -7, -8, 13, -19, 10, -26, 2, -19, -26, 5, 8, 7, -17, -63, -3, 1, -17, 9, -29, 2, 2, -4, 4, 9, -19, -14, -2, -47, -14, 10, -2, 2, -12, 5, -17, -33, 3, -23, 10, 5, -5, -6, -1, -8, 22, -24, 1, 4, 2, -2, 3, -11, -2, -32, 13, 41, -43, -1, -24, 22, -2, -34, -11, -2, -42, -18, 10, -49, 13, -29, 0, 7, -29, 3, 5, 17, -13, -67, -5, 5, -14, -15, -24, 5, 2, -5, -1, 7, -36, 3, 0, -1, -6, 11, 8, -1, -3, -8, -9, 1, -1, 3, 10, -29, -19, -7, 20, 22, 23, -17, 5, -2, -16, 7, 10, 30, -4, -48, -24, 39, 11, -5, 34, 3, 24, -15, 7, -10, 16, -36, 10, -43, 15, -24, 5, 11, -34, 2, 18, 8, -24, -3, 3, 5, 3, -14, -30, -13, 3, 1, -3, 7, 7, 5, -10, -39, -32, 1, 2, -2, 25, -16, 8, -27, -1, 0, -4, -12, -7, 3, 22, 25, -14, 20, -1, 7, -3, -13, -12, -12, -42, -17, -43, 31, 17, 25, 12, 29, -14, -59, 4, -3, -14, -64, 18, -35, 18, -44, 7, 18, -27, 3, 8, 21, -18, -7, -1, 2, -13, 3, -18, -33, 6, 10, -25, -14, -8, 11, -18, -3, 47, 11, -6, -3, 21, -11, -8, -7, 15, -10, -12, -38, -24, 13, 6, -17, 3, -19, 2, 1, -15, -14, -20, -10, -2, -92, 27, -127, -22, -36, 8, -19, -38, -88, -2, 3, -12, -33, 16, -28, 15, -25, -3, 14, -33, 0, 6, 16, -13, -26, -15, -9, -9, -19, -30, -20, 2, 9, -10, -10, 10, 2, -12, 18, -41, -32, 8, 0, 17, -7, -20, 3, 2, -25, -11, -1, -17, 8, -28, -4, 20, -21, 1, 0, -10, -10, -2, -1, 17, -21, 12, -16, 35, -13, -44, 53, 16, -34, -8, 0, 16, -52, 20, -32, 14, -13, -8, 19, -16, -6, 10, 17, -15, -37, 9, 5, 4, 2, -22, 22, 6, 12, 7, 16, -28, 1, -14, 4, 11, -14, 4, 4, -34, -7, -9, 12, 2, -9, -16, -20, -18, 5, 0, -23, 6, -64, -1, 1, 10, 15, 6, 0, -10, 3, 19, -37, 13, -23, 1, 8, 19, -34, 13, 8, -10, -10, 20, -27, 9, -11, -36, 13, -21, 1, 16, 21, 0, -28, 8, -1, 4, -8, -9, 16, 3, 9, 11, -4, -37, 9, -8, -5, -34, 14, -5, -5, 7, -8, -5, 18, 1, -2, -10, 6, 11, 15, 0, -27, 32, -40, 1, 2, -15, -1, -12, 8, -6, -6, 41, -37, -31, -31, 32, 32, -9, -14, -8, 0, -4, -28, 21, -37, 7, 3, -3, 24, -26, 4, 17, 24, -9, -20, -14, -7, 4, -14, -21, 11, 1, 12, -20, -14, -10, -22, -10, -15, -11, 7, 7, -3, -37, 6, 15, -4, -3, -23, -21, 10, 5, 21, -9, 11, 6, 2, 3, -5, -43, -7, -10, 6, 16, -88, -48, 13, -39, 1, -38, -28, -9, -4, -3, 7, -27, 1, 13, -24, 11, -6, -3, 22, -40, -1, 16, 12, -8, -6, 6, -7, 18, -9, -26, 8, 9, 7, -19, -32, -11, -1, -5, -2, -28, -21, -12, -1, -29, -2, 0, -7, -8, -1, -12, -17, -15, -8, -60, 27, -14, 18, 3, -5, -16, -7, 8, 1, 4, 4, 11, -2, 13, 9, -43, 0, 11, -16, 0, -6, -42, 10, -2, -42, 18, 0, -33, 13, 18, 14, 9, 7, 8, -3, 3, -2, 3, -14, -12, 2, -1, -2, 18, 12, 4, -6, -10, 18, 1, -23, 1, -1, 41, 16, 17, -7, -20, 4, -38, -4, -39, 22, -5, -11, -2, 14, -8, -7, -60, -30, -13, -6, 43, 8, 17, -1, -1, 29, 6, 5, 6, -3, -1, -7, -58, 25, 
  6, -7, -25, 9, 13, 2, 12, 10, 32, -30, 9, -63, -5, -1, -5, 11, -5, 2, 13, 3, 11, 27, -4, 5, -16, -27, 14, 8, 3, 6, 10, -14, 11, -9, 15, 39, -6, -35, -5, 54, 13, -56, 17, -97, -8, 2, 13, 10, 48, -9, 18, 47, -5, -33, 8, 5, 1, 34, 11, -28, 0, -3, -23, 17, -16, 2, -21, 15, 12, 12, 5, -15, -17, -23, -7, -8, -3, 3, -15, 22, 11, -41, -3, 15, -22, 17, 1, -20, -15, -27, 26, -18, -8, 0, -11, 16, 11, 16, 28, -7, 10, -43, 19, 78, 7, 20, 24, -43, 1, 4, 38, 16, 42, 13, 42, 7, 13, -10, -22, 12, 62, -12, -1, 24, 1, -6, -9, 32, -21, 0, -18, 21, 2, 33, 5, -32, -11, -58, -19, 20, 1, -1, -33, 16, 12, 8, -18, -13, 2, -26, 5, -18, -9, 13, 20, 25, -2, 1, -24, 7, 14, -20, 21, 22, 3, -32, -10, 10, 3, -25, 28, -7, -4, 0, 40, -14, 30, 22, 30, 24, 6, -47, -41, -2, 30, 33, -7, 29, 0, -7, -20, 31, -26, -11, -30, 19, 8, 39, 5, -31, -10, -45, -13, -23, -1, -4, 6, 12, -10, -15, -17, -19, -29, -16, 4, -25, -22, 31, -1, 5, 5, 4, -3, -13, 0, -16, 24, -4, -19, -10, 5, 23, 16, -16, -14, -1, 0, -2, -4, 0, 4, -31, 9, 24, -2, -37, 13, 7, 16, 10, -10, 7, -4, 1, 5, -17, -25, -22, -35, 10, 8, 18, -1, -23, 2, -48, -19, -26, -3, -5, -4, 21, -15, -7, -25, -9, -24, 8, 16, -15, -21, 15, 21, 49, 3, 6, 3, -19, -39, -46, 11, -5, -6, 23, 5, 27, -14, -58, 15, 35, 1, 4, 2, -16, -19, -33, 2, 29, 51, -42, 0, 24, -33, 24, 5, 10, -3, 1, -11, 11, -26, -24, -38, 22, 7, 29, 17, -54, -9, -32, -36, 15, 4, 2, 2, 19, -28, -20, -17, -19, 0, 1, -11, -24, -26, 48, 30, 53, -1, -2, 13, -11, -8, -58, 24, 18, 2, 10, -26, 15, -37, 42, 6, 30, -8, 5, -10, 11, -24, -50, 4, 1, 26, -28, -36, 3, -22, 4, 4, 33, -2, 6, 5, 14, -28, -37, -42, 20, 9, 18, 6, -28, -13, -38, -50, 30, -1, -2, 6, 21, -22, -40, -26, -13, 5, -14, -19, -19, -25, -1, 10, 30, 2, -1, 13, -21, -50, -25, 11, 8, -3, -3, -3, 11, 3, 56, 14, 76, -7, -2, -17, -1, 1, -37, 3, -27, -4, -3, -7, -21, 19, 15, -5, 61, -1, -2, 17, -23, -25, -34, -18, 18, 13, 16, 25, -27, -35, -52, -30, 11, -2, 4, 22, 8, -19, 7, -12, -23, -10, -3, 11, -31, -46, 36, 5, 70, -11, 2, 6, -4, -35, -24, 18, 15, 3, 2, 33, 25, -5, 39, 50, 20, 1, -2, 11, -14, -35, -13, 39, 5, 7, -6, -8, 12, 1, 18, 22, 39, -3, -2, -11, 42, -30, -36, -31, 23, 9, 25, 26, -34, -17, -39, -29, 16, -7, -1, -7, 20, -8, -35, -18, -21, 7, -13, -19, -19, -26, 9, 29, 0, -8, -6, 14, 7, -16, -56, 18, -16, 18, -9, 6, 25, 5, 30, -24, 35, -3, 0, -15, 9, -14, 17, 27, -13, 13, 12, -31, -4, -21, 24, -6, 14, -4, -3, -35, 8, -23, -37, -27, 1, 15, 15, 15, -23, -31, -31, -23, 25, -6, 0, 4, 23, -8, -64, -9, -19, 9, -9, 6, -14, -20, 30, 0, -6, 2, 3, -30, 6, 27, -53, 29, -10, 13, -45, -8, 27, 6, -9, -3, -6, 1, 0, -6, 1, 4, -3, 8, 17, -3, -15, 0, 22, 0, -22, 11, -11, 3, -5, -17, -10, -23, -28, -19, 13, 9, 23, 10, -40, -8, -42, -2, -5, -12, 7, -19, 19, -7, -28, -5, -6, -10, -4, -4, -33, -20, -10, 21, -19, -5, 1, 11, -9, -10, -70, 16, 12, -4, 5, -1, 10, 14, 2, -34, -29, -11, -1, 4, -1, 3, -39, 17, 38, 17, -40, -32, 9, -3, -9, 24, -2, -3, -1, 18, 19, -17, -29, -17, 9, -2, 23, 12, -14, -33, -42, -17, 8, -5, 4, -1, 22, -6, -66, -12, 8, 11, 23, 7, -16, -28, -18, 17, -47, -2, 4, 2, 15, 17, -45, 13, -19, 6, -32, -15, 11, -27, -26, 28, -49, -7, 3, -10, 9, 32, -63, 15, 1, -20, 45, -35, 29, 22, -38, 32, -42, -2, -3, -6, 25, 6, -34, -16, -2, 45, 4, -16, -51, -5, -5, 5, -70, -5, -3, -95, 24, 8, -25, 5, 2, -24, 5, -45, -27, -9, 1, 8, -50, -5, 2, 10, 23, 12, 8, 26, -13, -8, -14, -21, 17, -1, -4, 27, -45, -7, -2, -35, 0, 52, 12, 17, -4, 29, 5, -12, 33, -7, -43, -8, 0, -4, -1, -35, 9, 
  -49, 17, 14, 13, -16, -16, 3, 1, 9, -7, 6, -51, 2, 0, 7, -28, -12, -7, 8, 10, -5, -16, -23, -27, 12, 26, -16, -36, 3, 0, -89, -10, 1, -40, -6, 21, 2, 11, 6, 17, 1, 41, -5, 49, 10, 3, 13, -3, -49, 34, -42, -57, 0, 25, -26, -24, -51, 44, -9, 10, 3, 4, 3, -8, -4, -34, 11, 16, -52, -31, 7, -13, -5, -2, 19, -119, -2, -3, -13, -64, -14, -4, 10, -14, 3, 6, -35, 7, -10, -4, -58, 58, -12, -9, -76, 20, 9, -8, -3, 9, 7, 23, -8, 5, 42, -25, -16, 0, -16, 9, -2, 16, 6, -8, -7, 18, -13, -18, 6, 21, -16, 17, -3, 4, 5, -4, -21, -30, -17, -46, 11, 20, -39, -25, 17, -6, 8, -18, 14, -41, -17, -10, 14, -39, -13, -8, 12, -19, 4, 21, -43, 0, -20, -24, -61, -62, -6, -6, 6, 14, -16, -16, -6, -15, 12, 27, -6, -5, 20, 3, 25, -32, 13, 0, -30, 3, -45, -11, 3, 5, 43, 9, -10, -3, -21, -1, -11, -11, 3, -15, -10, -12, -16, -38, 12, 12, -30, -8, 8, -14, 6, -4, 19, -30, 6, -4, 8, -66, -11, 2, 3, -3, 5, -13, -50, -8, -30, -27, -52, -52, 3, 3, -5, 7, 10, -17, -22, 27, 4, -38, -34, 16, -29, -9, 10, -81, 7, -1, -44, 12, -25, -27, 17, 1, 9, -73, -6, 2, -65, -54, -2, 7, -3, -2, -9, -18, -7, -30, 19, 16, -7, -11, 18, -15, -7, 5, 12, -43, 4, -9, -7, -34, -24, 7, 6, -4, 0, 9, -55, -7, -38, -56, -22, -65, -10, -1, 43, 7, 16, 12, -18, -6, 13, 11, 0, -38, -32, -5, -14, -20, -12, -1, -6, -7, 23, 23, 16, 22, -5, -97, -44, -9, 19, -52, -1, 0, -3, 0, -8, 11, -19, -49, 16, 21, -5, -3, 25, -10, -5, -10, 16, -28, -6, -9, -4, -24, -31, 8, 6, -3, 6, 5, -22, -20, -26, -39, -26, -45, 2, -1, -51, 30, 18, 14, -32, -19, -7, -3, -14, -16, -51, -92, -63, -30, 2, -8, -50, 8, -13, -16, 16, 1, 17, 21, -10, -32, -30, -35, 12, -44, -1, -1, -18, -14, -23, -35, 20, 15, -13, 10, 20, -15, -12, -11, 18, 11, 2, 1, -9, -21, -34, -15, 4, -13, 11, -13, -49, -4, -13, -3, -44, 4, -8, 0, -18, 18, 11, -8, -33, -15, -4, 8, 6, -26, -49, -30, 5, -60, -2, -2, 26, 5, -1, -67, 25, 27, -38, 37, -11, -25, -36, -5, 11, -59, -8, -5, -42, 10, -22, -42, 22, 11, -2, 1, 5, -17, -6, -2, 17, -34, 3, 0, -2, -19, -41, -12, 5, -5, 16, -4, -63, -26, -32, -42, -29, -100, -2, 0, 16, 1, 10, 5, -21, -17, -24, -5, -7, -16, -86, 3, -74, 34, 2, 1, 4, 5, 16, -33, -2, -31, -31, -10, -20, 13, -37, -27, -39, -8, 2, -5, -7, 28, -28, -81, 18, 7, 6, 4, 4, -13, -23, -5, 14, -24, 9, -7, 11, -10, -15, 8, 10, -1, -33, -8, -30, -33, -25, 6, -62, -19, 1, -8, -14, 8, 8, 7, -29, 12, -1, 12, -25, -61, -45, -11, 6, 13, -5, -5, -21, -6, -9, -19, -30, 13, -3, -36, 0, 10, -20, 15, 2, -37, -14, -13, -26, 2, -26, -29, 15, 10, 7, 0, -5, -39, -22, 1, 16, -23, -14, -1, 33, -29, -28, 20, 2, 4, 11, 5, -27, -29, -48, -16, -10, -39, -8, -1, -19, 10, -28, -4, -8, 2, 11, 7, 7, 23, -25, -20, -12, -4, -11, -1, 1, -2, 12, -40, -6, -100, -36, -13, 8, -72, 27, -35, -12, -7, 10, 6, -20, -12, -40, -34, 16, 8, 10, 1, -4, -52, -51, -13, 8, -54, -5, 3, 10, -11, -10, -5, 2, -1, 10, 4, -17, -19, -18, 36, -74, -17, -17, -2, -25, 0, 19, -70, -19, 3, 7, -7, -8, -38, -11, 9, 18, -15, -3, 0, -8, 3, -8, -28, 20, -45, -43, 6, 3, -11, 19, 13, -6, -35, -8, -7, 29, 0, -59, -25, 10, 13, -5, -6, 9, -23, -31, -17, 13, -96, -15, -5, 16, -41, -13, -5, -3, 0, 21, -2, -3, -3, -10, 7, -9, 7, 2, -4, -58, -4, 14, -22, -17, -1, 12, 17, -5, -21, -38, -30, -21, -23, -2, 6, 13, 0, -36, -29, -5, -62, -12, 17, 16, -57, -12, 17, 18, -2, -10, -2, 23, -1, -27, -44, 7, 4, 21, -16, 26, -3, 0, -12, 6, -2, -1, -3, -12, -14, -21, -55, 0, -8, -25, 1, -43, 4, -12, -7, -58, -27, -1, 1, -17, 13, -41, 0, -31, -4, 25, 5, -39, -46, 12, 5, -5, -29, 0, 0, -25, -14, 10, -1, -53, 5, -11, -1, 0, -7, 10, 3, 14, -20, -8, -1, -31, -3, 
  -43, -20, 16, 4, -9, -26, -1, -12, -11, 7, 2, -18, 4, -3, -5, -5, 8, -23, -2, 4, -3, 19, -31, -1, -16, -21, -16, -31, 3, -15, 8, -7, 4, 18, 16, 2, 2, 26, 3, -8, -36, -24, -5, -29, -2, 1, 23, -5, 22, 18, 6, 23, -18, 5, -2, 18, -6, -1, -10, -12, -8, -7, -25, 28, -42, -46, 5, -7, 5, -6, -11, 8, 4, 5, 16, -4, -1, -3, -11, -16, -16, 9, 5, -17, 5, 8, -25, -12, -10, -81, 3, -22, -11, -7, -3, 5, 9, -17, -5, -6, -6, 29, 2, -24, -24, -105, -23, 27, 0, -6, 13, 1, -3, 14, -20, -39, -25, -57, -32, -36, -12, 10, -24, -31, 6, 4, 1, 12, -34, -48, 16, 4, -6, -12, -12, 10, -9, 6, 11, -24, 0, -7, -28, 2, -4, 0, 13, -9, 9, 6, 16, 10, 6, 17, -2, -22, -4, -3, 2, -9, -6, 20, -28, 0, -2, 9, -3, -5, -15, -45, -25, -16, -3, -5, -11, -2, -10, -6, -8, 23, -15, -12, 14, 1, -6, 2, 5, 11, -16, 0, -12, 9, -42, -7, 6, -4, -11, -29, -14, 12, -15, -1, 16, -1, -4, -9, -13, 1, 7, 22, 3, 8, 17, -6, -23, -10, 9, 26, -2, -23, -4, 3, -47, 9, 8, 20, -19, 5, 5, 35, -11, 2, -22, -23, -75, -3, -11, 0, -83, 5, -52, -36, -12, -14, -9, -16, -13, 0, 13, 21, -5, -49, 3, -10, 17, 5, -10, 2, 15, -9, -24, -25, -3, 10, -30, -6, 16, 10, -15, -5, -26, -12, 8, 20, 4, -1, 22, 26, 0, -2, 9, 21, 10, -22, 0, -1, -28, 4, 9, -2, -5, 8, -8, -18, -21, 4, -19, -3, -11, -35, -15, -9, -66, 4, -30, -43, 13, -22, 2, 14, -9, 1, -28, -32, 1, 14, -9, 7, -21, -14, -10, 6, 9, -2, -40, -14, -10, 8, -15, -7, 12, -12, -6, 3, -31, -10, 15, 18, 5, -1, 14, -28, -27, 5, 4, -9, -6, -102, -2, 0, -25, 4, -3, 0, -16, 2, -2, 34, -4, 2, -23, 13, -4, -68, -3, 0, 21, -11, 33, -26, 3, 20, -30, 36, 4, 12, -8, -110, 5, -42, -2, 10, 22, 26, -20, 7, 10, -8, -47, -26, -7, 9, -16, -15, 21, -30, 6, -9, -28, 3, 8, 17, 7, 0, 13, 6, 18, 1, 5, -12, 11, -89, 1, -5, 24, -2, 12, -5, -26, -3, 11, -5, -2, -4, -4, -24, -15, -39, -5, 3, -28, 10, 18, -31, -7, 16, -11, -41, 25, 13, -2, -78, -6, 5, 1, -6, 27, 27, -15, 12, 7, -7, -49, -19, -17, 10, -16, -11, 18, 14, 5, 4, -60, 5, 9, 7, 1, 10, 7, -3, -43, 6, 12, 7, 22, -22, -3, 0, -69, -4, 9, 22, -2, 20, -10, 6, -24, -30, 17, 28, -68, -102, -9, -1, -12, 6, -13, -44, -3, -17, -11, -19, 15, 4, 25, -49, 7, -9, 1, 6, -24, 27, -20, 12, 17, -11, -51, -26, -9, 6, -22, -5, 15, -14, -3, 4, -15, -8, 8, 14, 5, 8, 3, -25, 0, 12, 10, -23, 4, -6, -2, 4, -26, -10, 13, 4, -3, 2, 4, 4, -8, 0, -21, -11, 1, -110, 5, -1, 4, 4, -14, 2, 17, 5, -47, -27, -25, 4, 19, -40, -24, 0, -4, -4, -31, -36, -23, 15, 8, -16, -14, -16, 9, 16, -12, -1, 8, -9, 7, 0, -45, -13, 11, 2, -2, 2, -13, 0, -19, -15, 11, -21, -8, -43, 2, -2, -14, 12, 9, -7, -7, 0, 5, 24, -23, -36, 10, 14, -17, 6, -5, -1, 12, 7, -6, -15, -17, 11, 6, -2, -14, 7, -25, 0, 25, 10, -8, 9, -6, -14, -26, 15, 9, -17, -33, -19, -29, 7, -23, -7, 16, 3, 6, -8, -21, -3, 11, -10, 8, 2, 12, 25, -24, 1, 10, 1, 5, -13, 5, -3, -11, -6, 6, 17, -11, 14, 11, 7, -1, -5, -9, -33, -13, 7, 1, -3, -11, 7, 1, 6, -1, 26, 12, -6, 41, 20, 0, 11, -39, -14, 3, -16, 3, 15, 8, 18, 11, -4, -11, -51, -22, 0, -30, 11, 7, 1, 7, 3, -31, -2, 18, -11, -3, 1, 6, 22, -10, -13, -3, 25, -29, 16, 12, 0, -49, 0, -22, 16, -3, 0, -2, 21, 6, -4, -23, -14, 10, -2, 9, -3, -5, 2, -25, 25, -29, 31, -53, -56, 25, 18, 5, 7, -35, -1, 2, 4, -12, -28, -34, 13, 6, -14, 15, 4, -14, -5, -2, -6, 8, 3, 4, 0, 8, -7, -4, 22, -25, 1, 31, 13, 31, 11, -8, 5, 18, 9, -7, -6, -52, -24, 21, -4, -31, 0, 12, 7, -18, -10, -21, -11, -12, 17, 5, -2, 18, 40, 24, -8, 1, 1, -36, -4, -25, -30, -3, -5, -20, -5, -7, -4, 7, -98, 
  -37, 26, 7, -29, -40, -2, 16, 19, -18, 8, -17, 16, -3, 9, 17, 11, 16, -5, 8, -9, 2, 24, -21, 6, -27, -7, -1, -1, 0, 2, -7, 13, -16, -23, 8, -36, -4, -20, -5, -68, -39, -12, 17, -56, -10, -10, -17, 8, -8, -8, 4, -102, 9, -20, 17, -29, 5, -29, -9, -15, 1, 5, 8, -28, -24, 14, -2, -17, -19, -19, 21, 15, -15, 16, -39, 4, -1, 8, 13, 4, -13, -42, -13, -4, 10, 3, -20, -19, 9, -23, -18, 13, 2, 5, -20, -19, -40, 29, -8, -10, -24, 15, 1, -14, -30, -7, -17, 7, 8, 2, -12, -1, -2, -60, -47, -3, 2, 5, 26, -10, -37, -8, -24, -6, -7, 0, -10, -46, -8, 27, -4, -19, -28, -16, 21, 17, -4, 19, -12, -6, -13, 10, 24, -5, -10, 11, -24, 10, -1, 11, -13, 8, 18, 9, -14, -14, -1, -5, 31, 2, -1, -12, 19, 1, -17, 28, -4, -8, -41, 31, -8, 27, -2, -3, 4, -7, -1, -14, -30, -39, -87, 3, 9, -7, -26, -13, -4, -24, -5, 9, 24, -26, -17, 2, -1, -11, -48, -12, 21, 18, -11, 25, -2, 10, 4, 2, 31, -10, 11, -12, -14, 23, -2, 20, -24, 16, 15, 7, -7, -7, -2, 0, 50, -20, -5, 14, -2, -11, -21, 25, 13, -19, 36, 46, -2, 20, -11, -4, 11, -20, 8, 29, -25, -20, -42, -19, 6, -29, 8, 25, -15, 21, 0, 7, 1, -35, -29, 14, 3, -6, -44, -12, 24, 15, -11, 21, 4, 30, 6, 3, 27, 6, 9, 17, -12, 10, -10, -1, -18, 9, 13, 10, 3, -33, -8, 6, 1, -4, 11, -12, 17, -2, -16, -47, 12, 2, 8, 17, -31, 17, -16, 5, 17, -2, -10, -3, -33, -14, 13, 14, 12, -5, 1, -2, -26, -1, 4, -4, -4, -49, -34, 12, -3, -25, -54, -24, 20, 18, -14, 23, 3, 0, 3, 7, 33, 5, 8, 0, -8, 11, -19, 6, -11, 12, 17, -12, -3, -20, 2, -4, -7, -2, -9, 13, -1, 4, -7, -28, 24, -15, 21, -22, -4, -3, -2, -5, -8, 5, -12, -55, 12, -7, -3, -101, -26, -12, 15, 24, -22, 5, -10, -8, -17, 0, -36, 13, -4, 0, -61, -4, 20, 16, -13, 21, 12, -41, -11, 5, 25, 1, 7, 26, -10, 9, -15, 17, 2, -2, 6, 10, -28, -82, 7, -1, -49, -11, 9, -16, -3, 12, -18, -12, -17, -6, 8, 22, -46, -57, -4, -10, 23, 8, -29, 7, -16, 5, 5, 28, -15, 2, 18, -13, -8, 19, -5, -3, -1, -16, -25, 10, -4, -6, -51, -11, 26, 17, -7, 18, 11, -14, -4, -1, 21, 14, 6, -1, -15, 9, -29, 2, 15, 2, 11, -16, 31, -13, 0, -4, -43, -27, 14, 24, -7, 0, -21, -18, 2, -4, 13, -25, -21, 0, 2, 3, -2, 4, 4, 32, -10, 19, -6, -4, -44, -3, 7, 4, -17, 4, -1, 5, -73, -77, -29, 14, 2, -17, -50, -25, 17, 14, -11, 15, 10, 3, -13, -4, 3, -1, 1, 7, -6, 15, -21, 9, 20, 1, 15, -16, 1, -37, -2, -6, 7, -15, 21, 17, 5, -16, -1, 2, 9, 3, -10, 14, -4, 1, -2, -1, -14, 0, 4, -9, -8, 6, -22, 21, -28, 17, -20, 7, 4, 15, -6, -10, 3, -9, -26, 11, 10, 3, -58, -1, 14, 12, -10, 11, 6, -3, -7, -5, -11, 0, 8, 12, -8, 3, 8, -6, 38, -5, 13, -16, 18, -1, 5, 4, 8, -6, 8, 3, -9, 1, -10, -9, -42, 6, 15, 7, -8, 1, 0, -8, -42, 6, 3, 2, 0, 45, -55, 36, -8, 7, -7, 30, -37, 7, 8, -4, 13, 19, -29, 11, 7, -27, -61, -21, 17, 22, -11, 14, 13, 4, -5, 0, 9, -1, 5, -3, -15, -14, 8, -6, -40, 3, 7, -15, -25, -3, 1, 2, -6, 2, -20, 17, 9, -29, 6, -3, -15, 23, -15, -29, -6, 11, 7, 0, -5, -11, -4, -5, -19, -3, 28, -5, -11, -20, 5, -10, -6, -16, 9, 1, 8, -52, -25, 10, 2, -14, -18, -4, 10, 11, -20, 5, -7, 8, -6, -6, -41, -1, 3, 23, 0, -4, 22, -2, -20, 1, 8, 10, -10, 19, -12, -1, 37, -15, -8, 17, 8, 20, -23, 26, 4, 15, 33, -21, -57, 23, -8, -6, -39, -8, 22, 16, 0, 37, 5, -42, -41, -10, 16, -1, -19, 44, 2, 1, -9, -35, -59, 9, 2, -20, -20, 3, -26, 13, -9, 3, -11, 6, -13, -3, 4, 5, 13, -57, -1, 8, 18, -13, -26, 5, 7, 1, 4, 29, -12, 4, -28, 5, -81, 24, 18, -6, -20, 8, -59, -9, 12, -3, -49, 3, -16, -1, -3, -6, -57, -41, -60, -25, -3, -28, 16, -10, -1, 8, 13, 3, 2, -1, 50, -1, 
  1, 4, -55, -8, 2, 3, -22, -71, -62, -44, -31, -13, -11, -4, -15, -9, -4, 5, 8, -18, 8, -9, 19, -21, -25, -37, 12, 28, -12, 3, -10, -2, 28, 15, -5, -17, 1, -10, 16, -37, 24, -34, -13, -37, 3, 0, -44, -6, -18, -55, 21, -32, 3, -50, -19, -19, 27, -22, 4, 1, 11, -4, -1, 3, 12, 25, -21, -6, 9, 19, -32, 9, 11, -23, -30, 32, -9, -1, -13, 14, 3, 17, -3, -10, 10, -6, 9, 21, -20, -10, 4, -59, 0, -2, 1, -9, 14, -82, -22, 6, -3, -35, -26, -63, -42, -88, 13, 2, -3, 4, -48, -29, -68, -45, -27, -76, -32, -47, -1, 5, -80, 4, -6, -60, -7, 1, 3, -46, 11, 14, -44, -5, 9, 2, -9, 3, 6, -14, -55, 1, -1, -5, -5, 12, -2, -20, -15, 17, 15, 6, 25, 18, 16, -12, -14, 22, -4, 4, 39, -13, -14, -6, -12, 11, -16, -59, -6, -1, -25, -27, -31, -24, 2, -1, -35, 1, 10, 13, 10, -85, -27, 13, 1, -36, -52, -41, -7, -43, -8, -3, -14, -76, 17, 15, -45, 8, 2, -26, -31, 8, 26, -38, -39, -5, -1, -6, -24, 13, 8, -22, -9, 16, -9, -7, 12, 37, 9, -16, 5, -24, 1, 3, -27, -8, -22, -48, -20, 3, -4, -20, -16, -27, -32, -44, -84, -2, 5, -7, 0, -7, -10, 7, -23, 16, 0, -3, 7, -1, -1, -50, 12, -20, 5, -6, 15, 33, 14, 16, -48, -2, 3, 6, -45, 4, 23, -31, -62, 0, 5, -3, -29, 6, 11, -45, -7, 23, 6, -53, -17, 26, 13, 16, -40, -64, 9, 1, -5, -20, -15, 19, -44, 1, -22, 43, -9, 4, 3, -44, -10, -22, -11, 1, 12, -5, -7, 9, 21, -20, -1, -56, -15, 22, 14, -45, -19, -31, -2, 5, -23, -1, 18, 10, -25, -2, 6, -10, -51, 14, 22, -29, -43, 22, -16, -4, -26, 6, 13, -3, -5, 7, -36, -8, 38, 26, -1, 17, -48, -37, -4, -2, 20, -21, 2, 17, -14, 8, -4, -3, -14, 11, -10, -58, 5, -37, 12, -5, 9, -13, -31, 35, -14, 10, -21, 13, 31, 25, 19, -9, -6, -6, 3, -3, -16, -57, 15, 18, -51, -9, 5, -36, -29, 4, 27, -19, -51, -5, 8, -2, 3, -5, 14, -30, -6, 15, 10, 19, 8, 33, 11, 21, -92, 32, 1, -5, -62, 0, -3, 8, -23, 11, -9, 39, 0, 28, 12, -21, -46, 10, 7, -4, -50, -33, -3, 24, -39, 57, -53, -57, -26, 15, -80, 33, 32, -8, -2, 1, -22, -4, 15, 15, -53, -6, 8, -47, -38, 6, 34, -41, -51, 2, -6, -9, -18, 0, 14, 8, 1, 16, -14, 7, -52, 38, 17, 19, -75, -22, 7, -3, -36, 22, 3, -44, -7, 13, 12, 6, -42, 18, -15, -42, -4, -88, -2, 6, -7, -4, -20, 2, -43, 33, -40, -15, -12, -26, 17, 5, -24, -21, 2, -8, -56, -13, 17, 20, -40, 2, 11, -38, -36, 12, 34, -40, -39, -14, 3, -9, -17, -15, 8, -19, -14, 26, 8, 22, -24, 31, 13, 36, -56, 31, 3, -5, -30, -23, -37, -34, 0, 21, -60, 9, -14, -1, -17, -65, 6, 44, -1, -2, -40, -21, 3, 0, -51, -40, 3, 42, 24, -46, 0, -35, 8, -10, 4, 3, 33, 16, 13, 13, -61, -4, -7, -37, -24, 11, 19, -64, -73, -27, -6, 1, -43, -10, 14, -9, -14, 6, -49, -24, 4, 35, 11, 18, 16, 6, -2, -1, 13, -14, 6, -14, -38, -5, -40, 18, 43, -19, 1, -66, -47, -20, -10, -7, 7, -16, -19, -5, 10, 13, -21, 4, -10, -11, -3, -1, -26, -56, 6, -5, -16, 2, 17, 10, -40, 8, 6, -29, -7, 16, 25, -32, -50, 2, 10, -7, -24, -8, 7, 26, -27, 5, 12, -5, 14, 30, -1, 3, -35, -3, 4, -9, -24, -4, -14, 15, -25, 21, -10, -30, -2, -20, -11, -13, -4, -16, 3, -8, 0, -3, -7, 8, -37, -9, -11, -59, -25, -7, -3, -7, 33, 14, 0, -4, -5, -11, 17, 19, -38, -8, -4, -14, -39, 29, 15, -11, -6, 0, -1, -9, -10, 10, 11, 5, -17, 1, 9, 1, -1, 39, -1, -30, -35, 0, 9, 0, -12, -11, -20, 2, 1, 5, -6, -27, -15, -44, 26, 5, 5, -1, 2, -7, -31, -1, 12, 6, -3, -72, 8, -64, -5, 9, 1, 4, -39, 6, 3, 0, -3, -1, 54, 38, -22, -11, -38, -26, -7, 5, 4, 12, -71, 2, -5, -3, 2, -19, 6, 17, -8, -14, -20, -18, 38, -6, 6, -10, 21, 9, 1, 3, -31, -29, 31, -15, 27, 10, 9, -25, 58, -4, 3, 13, 37, 0, 3, -3, -27, -31, -43, -65, -21, 12, -85, 3, -10, -81, -18, 13, 0, -13, -10, -3, -2, 70, 
  27, -25, -22, -18, 8, 15, -37, 3, -35, -8, -55, 62, 5, 4, -43, -5, -11, -2, -18, -41, 1, -24, 13, 16, 8, 26, -15, -10, -5, 0, 11, 13, -23, 14, -27, -33, -22, -26, -12, 1, -8, 15, -24, 49, -1, 0, -10, 10, -61, -7, -12, 27, -5, 8, -2, -21, -7, -55, -7, 50, -8, 0, -20, -70, 24, 13, -25, -9, 9, -8, -31, -3, 1, -6, -30, 17, -8, 1, -11, 4, -10, 9, -28, 11, -4, -11, 10, -4, -21, 47, -4, -16, -1, -3, -19, 14, -10, 12, -17, 10, -2, 14, 9, -14, -30, 23, -91, 1, -4, -5, 1, 0, -55, 5, 48, 30, 4, 59, 25, 9, 11, -36, -7, 12, -1, 4, 5, -8, 15, 15, -21, -10, 23, -14, -37, -55, -31, 2, -27, -18, 0, 2, -19, -7, 13, 1, 2, 9, -9, -5, 4, -27, -40, -89, 13, -9, -12, -3, -79, -12, -5, 6, -7, 9, -1, -20, 12, -25, -57, 36, -11, -14, -2, 5, -45, 2, 4, -45, -9, -23, -2, -25, -15, 18, -37, -18, -12, -38, -12, 6, -33, 28, 20, 26, -2, -17, 23, 11, -54, -68, -24, -15, -28, 13, -10, 6, -14, 8, 8, -8, 6, -29, -5, -9, 47, -32, -47, -7, 22, -1, 0, -5, -11, 16, 4, 25, 18, -25, 13, -30, 13, -26, -82, -15, 29, -25, -5, 2, -10, 2, 17, 25, 2, -30, -10, 15, 22, -11, -23, -57, -6, -4, -5, 3, -31, 24, 20, 17, -24, -3, 23, -16, -35, -77, -7, -41, -27, 9, 3, 8, -23, -2, 13, -25, 7, -25, -11, -39, 25, -43, -53, -48, -21, -26, -1, -6, -22, 16, -14, -4, 5, -28, 12, -18, 14, -9, -22, -41, -22, -34, 8, -7, 18, 0, 3, -1, -21, 17, -94, 10, 2, -38, -26, 21, -5, -36, -11, -8, 11, 31, 25, 18, -11, -5, 22, -19, -67, -66, -16, -18, -9, -48, -2, -8, -26, -16, 4, -47, 10, -21, 12, -5, 6, -38, -75, 1, 50, -21, -8, 4, 13, 1, -13, -23, 27, -16, 14, -24, 15, -69, 4, -9, 22, -5, -13, -6, -13, 0, 29, 32, -11, -34, -1, -11, -11, -41, -16, 14, -6, 29, 7, -1, 36, 47, 25, 12, -11, -1, 26, -12, -45, -31, -7, -10, -23, -29, -8, 2, -32, -35, 16, 7, 9, -22, -20, -26, 2, -13, -59, -19, -23, -14, -6, -3, -8, 11, -10, 30, 28, -11, 17, 0, 6, -108, -34, -77, 5, -81, 3, 1, 4, -17, 12, 46, 1, -66, 17, -35, -9, 5, -13, 10, -7, -33, 2, -2, -17, -9, 23, 17, -14, -5, 22, -4, -19, -36, -9, -25, -20, -47, 1, 3, -4, -17, 9, -1, 10, -53, -1, -12, 3, -50, -61, -48, -30, 7, -8, 6, 23, 8, -2, -27, 2, -18, 24, 3, 8, -39, -9, -47, 11, -42, -1, -6, -34, 6, 15, 6, -22, -29, 13, 14, -22, -15, -33, -47, 1, -38, -2, 8, 52, -11, 22, 16, -21, -10, 24, -13, -16, -39, -4, -12, -6, 4, -7, -13, -52, -34, 13, -33, 1, -46, 2, -17, 10, -32, -43, -37, 12, -6, -2, 1, 23, 15, 6, -27, -2, -3, 15, -9, 23, -45, 26, 9, -17, -46, -2, 2, 7, -11, -2, -20, 6, -4, -8, -37, 38, 13, -3, -25, -17, -30, 11, -3, 42, 17, 21, 19, -8, -9, 15, -14, -34, -37, -1, -15, -15, 24, 7, -2, -6, -21, 14, -37, 8, -11, 1, 15, 3, -12, -31, -17, -8, -3, 3, -7, -6, -13, -22, 5, 14, 5, 11, -29, -12, -26, -42, 32, -6, -20, 1, 14, -8, 7, 3, 11, -4, -28, -16, -8, 29, 33, -58, -41, 2, 13, -2, 3, -5, 2, 20, 11, -14, -5, 5, -14, -9, -24, -5, -7, -33, 25, -4, 1, -5, -15, 4, 12, 8, -20, -52, -23, 22, -2, -18, -16, 42, 6, 0, 0, -14, -7, -5, 16, 12, -4, -25, 6, 4, -29, 13, 27, 13, -1, 1, 7, 3, -11, 5, 8, -35, 28, 5, 9, -5, -17, -7, -8, -7, -14, -7, -3, -34, -17, 11, 4, -25, -11, 0, -24, -18, -18, -3, 5, -55, -16, -8, 1, 0, -25, 5, 3, 3, -32, -64, -38, 16, -18, 1, -10, 18, 0, 1, -5, -14, 2, -23, 4, -2, -18, -6, -4, 11, 10, 3, 41, -4, -12, -2, 8, -6, 6, -30, -7, -19, -71, 22, 9, -14, -33, 0, -7, -11, -21, -6, 5, -12, -12, -25, -9, -26, 9, -66, -11, -52, 18, -17, -12, -46, 2, -9, 0, -16, -13, 2, 40, 5, -5, -42, -12, -97, -7, 13, -14, -9, -2, 9, -3, -9, -24, -12, -45, -20, 3, 2, 0, 29, 19, -14, 5, -3, -6, -2, -2, 46, 13, -39, 29, -31, -16, -2, 0, 10, 12, -10, 3, -31, 12, 6, 2, -16, -48, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 7,832 } };
const TfArray<1, float> quant7_scale = { 1, { 0.021563086658716202, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[7] = { -276, 2782, 677, -869, -2372, -1090, 1333, };
const TfArray<1, int> tensor_dimension8 = { 1, { 7 } };
const TfArray<1, float> quant8_scale = { 1, { 0.00067081832094117999, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,50,13,1 } };
const TfArray<1, float> quant9_scale = { 1, { 0.049623288214206696, } };
const TfArray<1, int> quant9_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,50,13,8 } };
const TfArray<1, float> quant10_scale = { 1, { 0.018951045349240303, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,25,7,8 } };
const TfArray<1, float> quant11_scale = { 1, { 0.018951045349240303, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,25,7,16 } };
const TfArray<1, float> quant12_scale = { 1, { 0.031109567731618881, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,13,4,16 } };
const TfArray<1, float> quant13_scale = { 1, { 0.031109567731618881, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,832 } };
const TfArray<1, float> quant14_scale = { 1, { 0.031109567731618881, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,7 } };
const TfArray<1, float> quant15_scale = { 1, { 0.22389642894268036, } };
const TfArray<1, int> quant15_zero = { 1, { 21 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,7 } };
const TfArray<1, float> quant16_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 9,3,4 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 10 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 11,5,6 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TfLiteReshapeParams opdata5 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs5 = { 2, { 13,2 } };
const TfArray<1, int> outputs5 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata6 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs6 = { 3, { 14,7,8 } };
const TfArray<1, int> outputs6 = { 1, { 15 } };
const TfLiteSoftmaxParams opdata7 = { 1 };
const TfArray<1, int> inputs7 = { 1, { 15 } };
const TfArray<1, int> outputs7 = { 1, { 16 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 5824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 28, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5200, (TfLiteIntArray*)&tensor_dimension9, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 5200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5200, (TfLiteIntArray*)&tensor_dimension11, 1400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 2800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2800, (TfLiteIntArray*)&tensor_dimension13, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 832, (TfLiteIntArray*)&tensor_dimension15, 7, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 7, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 17;
  for (size_t i = 0; i < 17; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 8; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 8; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  16, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 8; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
